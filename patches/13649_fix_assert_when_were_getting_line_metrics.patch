Index: modules/skparagraph/src/TextLine.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/skparagraph/src/TextLine.cpp b/modules/skparagraph/src/TextLine.cpp
--- a/modules/skparagraph/src/TextLine.cpp	(revision abd8d1e2ea2367ecd2e1d548257a8a3188c4c74d)
+++ b/modules/skparagraph/src/TextLine.cpp	(revision d777190ee813d42d47fa2cf7fdc172421cd53843)
@@ -1042,7 +1042,7 @@
 bool TextLine::endsWithHardLineBreak() const {
     // TODO: For some reason Flutter imagines a hard line break at the end of the last line.
     //  To be removed...
-    return fOwner->cluster(fGhostClusterRange.end - 1).isHardBreak() ||
+    return (fGhostClusterRange.width() > 0 && fOwner->cluster(fGhostClusterRange.end - 1).isHardBreak()) ||
            fEllipsis != nullptr ||
            fGhostClusterRange.end == fOwner->clusters().size() - 1;
 }
Index: modules/skparagraph/tests/SkParagraphTest.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/skparagraph/tests/SkParagraphTest.cpp b/modules/skparagraph/tests/SkParagraphTest.cpp
--- a/modules/skparagraph/tests/SkParagraphTest.cpp	(revision abd8d1e2ea2367ecd2e1d548257a8a3188c4c74d)
+++ b/modules/skparagraph/tests/SkParagraphTest.cpp	(revision d777190ee813d42d47fa2cf7fdc172421cd53843)
@@ -7014,3 +7014,25 @@
     // Notice, that the cache didn't work for the second paragraph - as it should not
     REPORTER_ASSERT(reporter, 2 == fontCollection->getParagraphCache()->count());
 }
+
+DEF_TEST(SkParagraph_lineMetricsWithEllipsis, reporter) {
+    sk_sp<ResourceFontCollection> fontCollection = sk_make_sp<ResourceFontCollection>();
+    if (!fontCollection->fontsFound()) return;
+    fontCollection->setDefaultFontManager(SkFontMgr::RefDefault());
+    fontCollection->enableFontFallback();
+
+    ParagraphStyle paragraph_style;
+    paragraph_style.setMaxLines(1);
+    std::u16string ellipsis = u"\u2026";
+    paragraph_style.setEllipsis(ellipsis);
+
+    ParagraphBuilderImpl builder(paragraph_style, fontCollection);
+    builder.addText("hello");
+
+    auto paragraph = builder.Build();
+    paragraph->layout(1.);
+
+    std::vector<LineMetrics> lm;
+    paragraph->getLineMetrics(lm);
+    REPORTER_ASSERT(reporter, lm.size() == 1);
+}
